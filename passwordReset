title Password Reset
actor User
boundary Client
entity Sonic
Client->User:display(resetPassword)
opt Reset Password CTA
  User->Client: click(resetPassword)
end 
opt Exit Journey
  User->Client: click(cancel)
end 
alt Not Logged In
  ==UX: Anonymous User==
  Client->User: display(enterResetEmail)
    alt Redirect
      Client->Client: input(emailAddress)
    else Clean Reset
      User->Client:input(emailAddress)
    end
    Client->Client:validateEmailFormat(emailAddress)
    alt Invalid format email address
      Client->User: display(error)
    else Valid format email address
      Client-> User: display(submit)
      User->Client: click(submit)
      Client-> Sonic: resetPassword(username)
      alt Username not found
        Sonic->Client: error(not.found)
        Client->User: display(error)
        note over User,Client: **UX:Registration**
      end 
      Sonic->Client: return(success)
      Sonic-->*Email:<<create>>
      Email->User:mailTo(emailAddress)
      Client->User: display(passwordResetEmailSent)
      User->Email: click(passwordResetLink)
      Email->Client:url(passwordResetToken)
      destroy Email
    end // Valid format Email Address
else Logged In
  note over Client,Sonic: UX:Update User Profile
  Client ->User: display(enterCurrentPassword)
  User->Client: input(currentPassword)
end //Not Logged In//
loop Password Reset Process
  Client->User: display(enterNewPassword)
  User->Client:input(newPasswword)
  User->Client: input(repeatPassword)
  opt Toggle Password Visibility
    User->Client: click(displayNewPassword)
    Client ->User: display(NewPassword)
  end
  Client->Client:existNewPassword(boolean)
  alt newPassword Exist=false
    Client->User: display(error)
  else newPassword Exists=True
    Client->Client: checkLength(password)
    alt New Password length <8 char
      Client->User: display(error)
    else New Password correct length
      Client ->Client: match(newPassword,repeatPassword)
      alt newPassword != repeatPassword
        Client->User: display(error)
      else newPassword == repeatPassword
        Client->User: display(submit)
        User->Client: click(submit)
      end
      alt Logged In
        Client->Sonic: changePassword(currentPassword,newPassword)
      else Logged Out
        Client->Sonic: changePassword(passwordResetToken,newPassword)
      end
      alt Password complexity fail
        Sonic->Client: error(invalid.password)
        Client->User:display(error)
        Client->User: display(enterNewPassword)
      else Invalid Payload
        Sonic->Client: error(invalid.payload)
        alt Logged In: Current Password not recognised
          Client->User: display(error)
        else Logged Out: Expired Reset Link
          Client ->User: display(error)
        end
        Client->Client: clearNewPassword(newPassword)
      end \\end Password complexity fail\\
    end \\password length\\
  end \\ end Password exists\\
end \\end Reset loop\\
Sonic->Client: return(success)
Client->User: display(passwordChanged)
alt Logged In
else Logged Out
Client->Sonic: login(username,newPassword)
Sonic->Client: return(token)
Client->Client: store(token)
Client->User: display(homepage)
end
